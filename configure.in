AC_INIT(biobambam,0.0.47,[gt1@sanger.ac.uk],[biobambam],[http://www.sanger.ac.uk])
AC_CANONICAL_SYSTEM
AC_PROG_LIBTOOL

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(biobambam,0.0.46)
AC_CONFIG_MACRO_DIR([m4])

AC_ARG_ENABLE(optimization,
        AS_HELP_STRING([--enable-optimization],[use compiler optimization (default yes)]),
        [optimization=${enableval}],[optimization=yes])
AC_ARG_ENABLE(debug,
        AS_HELP_STRING([--enable-debug],[use compiler debug flags (default no)]),
        [debug=${enableval}],[debug=no])
AC_ARG_ENABLE(profile,
        AS_HELP_STRING([--enable-profile],[use compiler profiling flags (default no)]),
        [profile=${enableval}],[profile=no])
AC_ARG_ENABLE(fast,
        AS_HELP_STRING([--enable-fast],[disable evaluation of assertions (default no)]),
        [fast=${enableval}],[fast=no])

if test "${debug}" = "yes" ; then
        CXXFLAGS="${CXXFLAGS} -g -O0 -rdynamic"
        CFLAGS="${CFLAGS} -g -O0 -rdynamic"
	openmp="no"
else
	if test "${profile}" = "yes" ; then
	        CXXFLAGS="${CXXFLAGS} -g -pg -rdynamic"
	        CFLAGS="${CFLAGS} -g -pg -rdynamic"
	else
		if test "${optimization}" = "yes" ; then
			case ${CC} in
				gcc)
					CFLAGS="${CFLAGS} -O3 -rdynamic"
					;;
				*-mingw32msvc-gcc)
					CFLAGS="${CFLAGS} -O3 -rdynamic"
					;;
				cl.exe)
					CFLAGS="${CXXFLAGS} -O2 -Ob2 -Ot -Oy"
					;;
			esac
			case ${CXX} in
				g++)
					CXXFLAGS="${CXXFLAGS} -O3 -rdynamic"
					;;
				*-mingw32msvc-g++)
					CXXFLAGS="${CXXFLAGS} -O3 -rdynamic"
					;;
				cl.exe)
					CXXFLAGS="${CXXFLAGS} -O2 -Ob2 -Ot -Oy"
					;;
			esac
		fi

	fi
fi

# check for C compiler
CFLAGS_SAVE="${CFLAGS}"
CFLAGS=""
AC_PROG_CC
CFLAGS="${CFLAGS_SAVE}"

AM_PROG_CC_C_O

# check for C++ compiler
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS=""
AC_PROG_CXX
CXXFLAGS="${CXXFLAGS_SAVE}"

# check for pkg-config tool
PKG_PROG_PKG_CONFIG

if test "${fast}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -DNDEBUG"
fi

# check for standard headers
AC_LANG_PUSH([C++])
AC_HEADER_STDC
AC_LANG_POP

# check for samtools library and headers
BAMBAMHAVESAMTOOLS=
SAMTOOLSCPPFLAGS=
SAMTOOLSLDFLAGS=
SAMTOOLSLIBS=
AC_ARG_WITH([samtools],
            [AS_HELP_STRING([--with-samtools@<:@=PATH@:>@], [path to samtools directory with compiled library @<:@default=no@:>@])],
            [with_samtools=${withval}],
            [with_samtools=no])

if [[ "${with_samtools}" != "no" ]] ; then
	LIBSSAVE="${LIBS}"
	LDFLAGSSAVE="${LDFLAGS}"
	CPPFLAGSSAVE="${CPPFLAGS}"

	if [[ \( ! -z "${with_samtools}" \) -a \( "${with_samtools}" != "yes" \) ]] ; then
		SAMTOOLSCPPFLAGS="-I${with_samtools}/include -I${with_samtools}"
		SAMTOOLSLDFLAGS="-L${with_samtools}/lib -L${with_samtools}"
	fi

	SAMTOOLSLIBS="-lbam -lz"

	CPPFLAGSSAVE="${CPPFLAGS}"
	LDFLAGSSAVE="${LDFLAGS}"
	CPPFLAGS="${CPPFLAGS} ${SAMTOOLSCPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${SAMTOOLSLDFLAGS}"

	AC_LANG_PUSH([C++])
	AC_CHECK_HEADER(bam.h, [bam_h=yes], [bam_h=no])
	AC_CHECK_HEADER(samtools/bam.h, [samtools_bam_h=yes], [samtools_bam_h=no])
	AC_LANG_POP

	CPPFLAGS="${CPPFLAGSSAVE}"
	LDFLAGS="${LDFLAGSSAVE}"

	if test "${bam_h}" = "yes" -o "${samtools_bam_h}" = "yes" ; then
		AC_LANG_PUSH([C++])

		CPPFLAGSSAVE="${CPPFLAGS}"
		LDFLAGSSAVE="${LDFLAGS}"
		LIBSSAVE="${LIBS}"
		CPPFLAGS="${CPPFLAGS} ${SAMTOOLSCPPFLAGS}"
		LDFLAGS="${LDFLAGS} ${SAMTOOLSLDFLAGS}"
		LIBS="${LIBS} ${SAMTOOLSLIBS}"

		if test "${bam_h}" = "yes" ; then
			BAMHEADER="bam.h"
			BAMHEADERDEFINE="#define HAVE_BAM_H"
			CPPFLAGS="${CPPFLAGS} -DHAVE_BAM_H"
		fi
		if test "${samtools_bam_h}" = "yes" ; then
			BAMHEADER="samtools/bam.h"
			BAMHEADERDEFINE="#define HAVE_SAMTOOLS_BAM_H"
			CPPFLAGS="${CPPFLAGS} -DHAVE_SAMTOOLS_BAM_H"
		fi

		AC_MSG_CHECKING([whether we can compile a program using bam.h])
			AC_LINK_IFELSE([AC_LANG_SOURCE([
#if defined(HAVE_BAM_H)
#include <bam.h>
#elif defined(HAVE_SAMTOOLS_BAM_H)
#include <samtools/bam.h>
#else
#error "Required bam.h header not available."
#endif

				int main() {
					sam_open("reads.bam");
					return 0;
			}])],
			have_bam=yes,
			have_bam_h=no
		)

		AC_MSG_RESULT($bam_h)
		CPPFLAGS="${CPPFLAGSSAVE}"
		LDFLAGS="${LDFLAGSSAVE}"
		LIBS="${LIBSSAVE}"
		AC_LANG_POP

		if test "${have_bam}" = "no" ; then
			AC_MSG_ERROR(["Compiling test program failed, aborting.])
		else
			BAMBAMHAVESAMTOOLS="#define BAMBAM_HAVE_SAMTOOLS"
		fi
	else
		AC_MSG_ERROR([Header bam.h not found.])
	fi
fi

if test "${CXX}" = "g++" ; then
	CPPFLAGS="${CPPFLAGS} -W -Wall"
fi

AC_ARG_WITH([libmaus],
            [AS_HELP_STRING([--with-libmaus@<:@=PATH@:>@], [path to installed libmaus library @<:@default=@:>@])],
            [with_libmaus=${withval}],
            [with_libmaus=])

if test ! -z "${with_libmaus}" ; then
	PKGCONFIGPATHSAVE="${PKG_CONFIG_PATH}"
	if test -z "${PKG_CONFIG_PATH}" ; then
		export PKG_CONFIG_PATH="${with_libmaus}/lib/pkgconfig"
	else
		export PKG_CONFIG_PATH="${with_libmaus}/lib/pkgconfig:${PKG_CONFIG_PATH}"
	fi
fi

PKG_CHECK_MODULES([libmaus],[libmaus >= 0.0.34])

if test ! -z "${with_libmaus}" ; then
	if test ! -z "${PKGCONFIGPATHSAVE}" ; then
		export PKG_CONFIG_PATH="${PKGCONFIGPATHSAVE}"
	fi
fi

LIBMAUSCPPFLAGS="${libmaus_CFLAGS}"
LIBMAUSLIBS="${libmaus_LIBS}"

CPPFLAGS_SAVE="${CPPFLAGS}"
LDFLAGS_SAVE="${LDFLAGS}"
LIBS_SAVE="${LIBS}"

CPPFLAGS="${CPPFLAGS} ${libmaus_CFLAGS}"
LIBS="${LIBS} ${libmaus_LIBS}"

AC_LANG_PUSH([C++])
AC_MSG_CHECKING([whether we can compile a program using libmaus])
	AC_LINK_IFELSE([AC_LANG_SOURCE([
#include <libmaus/util/ArgInfo.hpp>

				int main(int argc, char * argv[[]]) {
					::libmaus::util::ArgInfo const arginfo(argc,argv);
					return 0;
			}])],
			have_libmaus=yes,
			have_libmaus=no
		)
AC_LANG_POP
AC_MSG_RESULT($have_libmaus)

if test "${have_libmaus}" = "no" ; then
	AC_MSG_ERROR([Required libmaus is not available.])
fi

AC_LANG_PUSH([C++])
AC_MSG_CHECKING([whether we libmaus has support for io_lib])
	AC_LINK_IFELSE([AC_LANG_SOURCE([
#include <libmaus/LibMausConfig.hpp>

				int main(int argc, char * argv[[]]) {
					#if ! defined(LIBMAUS_HAVE_IO_LIB)
					#error "installed libmaus does not support io_lib"
					#endif
					return 0;
			}])],
			have_libmaus_iolib=yes,
			have_libmaus_iolib=no
		)
AC_LANG_POP
AC_MSG_RESULT($have_libmaus_iolib)

LIBMAUSIOLIBDEFINE=
SCRAMTOFASTQ=
if test "${have_libmaus_iolib}" = "yes" ; then
	LIBMAUSIOLIBDEFINE="#define BIOBAMBAM_LIBMAUS_HAVE_IO_LIB"
	SCRAMTOFASTQ="scramtofastq"
fi

CPPFLAGS="${CPPFLAGS_SAVE}"
LDFLAGS="${LDFLAGS_SAVE}"
LIBS="${LIBS_SAVE}"

BAMBAM_CFLAGS="${CPPFLAGS} ${SAMTOOLSCPPFLAGS}"
BAMBAM_LDFLAGS="${LDFLAGS} ${SAMTOOLSLDFLAGS}"
BAMBAM_LIBS="${LDFLAGS} ${SAMTOOLSLIBS}"

PACKAGE_NAME=${PACKAGE}
PACKAGE_VERSION=${VERSION}

AC_SUBST([PACKAGE_NAME])
AC_SUBST([PACKAGE_VERSION])
AC_SUBST([BAMBAM_CFLAGS])
AC_SUBST([BAMBAM_LDFLAGS])
AC_SUBST([BAMBAM_LIBS])
# libmaus
AC_SUBST([LIBMAUSCPPFLAGS])
AC_SUBST([LIBMAUSLIBS])
# samtools
AC_SUBST([SAMTOOLSCPPFLAGS])
AC_SUBST([SAMTOOLSLDFLAGS])
AC_SUBST([SAMTOOLSLIBS])
AC_SUBST([BAMBAMHAVESAMTOOLS])
AC_SUBST([LIBMAUSIOLIBDEFINE])
#
AC_SUBST([SCRAMTOFASTQ])
#
AC_SUBST([BAMHEADERDEFINE])
# 
AC_OUTPUT(Makefile src/Makefile src/biobambam/BamBamConfig.hpp)
